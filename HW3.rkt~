#lang racket

;flatten lst - returns list of symbols contained in lst in the orfer in which they occur
; and removes all inner parentheses from its argument
(define flatten (lambda (lst) (
                     cond ((null? lst) '())
                       ((list? (car lst))
                        (append (flatten (car lst)) (flatten (cdr lst))))
                       (else (cons (car lst) (flatten (cdr lst)))))
                       ))

(flatten '(a b (c d) ((e (f)))))

;merge - sorts two lists of integers already sorted into ascending order are merged together into one list in asc order
(define merge (lambda (lst1 lst2)
                (cond
                  ((and (null? lst1) (null? lst2) '()))
                  ((null? lst1) (cons (car lst2) (merge lst1 (cdr lst2))))
                  ((null? lst2) (cons (car lst1) (merge (cdr lst1) lst2)))
                  ((> (car lst1) (car lst2)) (cons (car lst2) (merge lst1 (cdr lst2))))
                  (else (cons (car lst1) (merge (cdr lst1) lst2)))
                                   )))
(merge '(1 2 4 53 66) '(3 12 33 91))

