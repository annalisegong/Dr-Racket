#lang racket
(require "utility.rkt")

;(processor (var-exp a)) -> (resolve a variable_env) -> 1
(define process_var_exp
  (lambda (parsedCode env)
    (resolve_env (cadr parsedCode) env)
    )
  )

;(processor (app-exp (func-exp ((var-exp x)) (var-exp x)) (var-exp a)))
;function func(x) (...); func(1)
(define process_app_exp
  (lambda
      (parsedCode env)
    (let*
        (
         (global_env (trim_to_global_scope env));this env only has global scope
         (local_env
          (push_vars_to_env
           (map (lambda (arg) (cadr arg)) (cdr (car (cadr (cadr parsedCode)))))
           (map (lambda (val-exp) (processor val-exp env))
                (cdr (caddr parsedCode)))
           global_env)
          )
         )
      (processor (caddr (cadr parsedCode)) local_env)
    )
  )
 )

;(num-exp 1) -> 1
(define process_num_exp
  (lambda (parsedCode env)
    (cadr parsedCode)
    )
  )

;bool-exp == (var-exp x) (num-exp 1) -> (operator x 1) -> #t or #f
(define process_bool_exp
  (lambda (parsedCode env)
    (cond
      ((eq? '< (cadr parsedCode))
       (< (processor (caddr parsedCode) env) (processor (cadddr parsedCode) env)))
      ((eq? '> (cadr parsedCode))
       (> (processor (caddr parsedCode) env) (processor (cadddr parsedCode) env)))
      ((eq? '<= (cadr parsedCode))
       (<= (processor (caddr parsedCode) env) (processor (cadddr parsedCode) env)))
      ((eq? '>= (cadr parsedCode))
       (>= (processor (caddr parsedCode) env) (processor (cadddr parsedCode) env)))
      ((eq? '== (cadr parsedCode))
       (eq? (processor (caddr parsedCode) env) (processor (cadddr parsedCode) env)))
      ((eq? '&& (cadr parsedCode))
       (and (processor (caddr parsedCode) env) (processor (cadddr parsedCode) env)))
      ((eq? '|| (cadr parsedCode))
       (or (processor (caddr parsedCode) env) (processor (cadddr parsedCode) env)))
      ((eq? '! (cadr parsedCode))
       (not (processor (caddr parsedCode) env)))
      ((eq? '!= (cadr parsedCode))
       (not (eq? (processor (caddr parsedCode) env) (processor (cadddr parsedCode) env))))
      (else (error-output "Bad boolean expression"))
      )
    )
  )

;ask ( == x 1) true-exp false-exp -> (if == x 1) -> true-exp or false-exp
(define process_ask_exp
  (lambda (parsedCode env)
    (if
     (processor (cadr parsedCode) env)
     (processor (caddr parsedCode) env)
     (processor (cadddr parsedCode) env))
    )
  )

;math
(define process_math_exp
  (lambda (parsedCode env)
    (cond
      ((eq? '+ (cadr parsedCode))
       (+ (processor (caddr parsedCode) env) (processor (cadddr parsedCode) env)))
       ((eq? '- (cadr parsedCode))
       (- (processor (caddr parsedCode) env) (processor (cadddr parsedCode) env)))
       ((eq? '* (cadr parsedCode))
       (* (processor (caddr parsedCode) env) (processor (cadddr parsedCode) env)))
       ((eq? '/ (cadr parsedCode))
       (quotient (processor (caddr parsedCode) env) (processor (cadddr parsedCode) env)))
       ((eq? '// (cadr parsedCode))
       (/ (processor (caddr parsedCode) env) (processor (cadddr parsedCode) env)))
       ((eq? '% (cadr parsedCode))
       (modulo (processor (caddr parsedCode) env) (processor (cadddr parsedCode) env)))
       (else (error-output "Bad math expression"))
     )
    )
  )
;let-exp
;(list-exp ((var-exp d) (num-exp 10)) (var-exp f) (num-exp 20)))
;(math-exp + (var-exp d) (math-exp + (var-exp f) (var-exp x))
(define process_let_exp
  (lambda (parsedCode env)
    (let*
        (
         (varname_value_list ; = ((d 10) (f 20))
          (map (lambda (pair)
                 (list (cadr (car pair)) (processor (cadr pair) env)))
               (cdr (cadr parsedCode))))
        ; top scope: ((d 10) (f 20)) + ((x 5)) local scope: ((a 1) (b 2) (c 3)) 
        (let_local_env (cons (append varname_value_list (car env)) (cdr env))))
    (processor (caddr parsedCode) let_local_env)
    )
  )
)

;assign
(define process_assign_exp
  (lambda (parsedCode env)
    (let*
        ((varname (cadr (car (car (cdr parsedCode)))))
         (value (processor (cadr (car (cdr parsedCode))) env))
         (is_varname_in_scope (is_in_list (combine (extract_varname_from_env env)) varname)))
    (if is_varname_in_scope
        (update_variable_in_env varname value env)
        (cons (cons (list varname value) (car env)) (cdr env)))
   )
  )
)

;(((a 1) (b 2) (c 3)) (z 10) (y 5) (z 7)) (m 6) (o 8))) -> ((a b c) (x y z) (m o))
(define extract_varname_from_env
  (lambda (env)
    (map (lambda (scope)
           (map (lambda (pair)
                  (car pair)) scope)
           ) env)
    )
  )

; ((a b c) (x y z) (m o)) -> ((o m z y x c b a))
(define combine
  (lambda (list_of_lists)
    (cond
     ((null? list_of_lists) '())
     ((eq? (length list_of_lists) 1) (car list_of_lists))
     ;check if the second item is empty, if not, move first item of second list to first list
     ;otherwise, remove the second list when it's empty
     ((null? (cadr list_of_lists)) (combine (cons (car list_of_lists) (cddr list_of_lists))))
     (else
      (combine
            (cons (cons (car (cadr list_of_lists)) (car list_of_lists))
                          (cons (cdr (cadr list_of_lists) (cddr list_of_lists))))))
    )
  )
)

;((a 1) (b 2) (c 3))
; (update_variable_in_scope a 5) -> ((a 5) (b 2) (c 3))
(define update_variable_in_scope
  (lambda (varname value scope)
    (cond
      ((null? scope) '())
      ((eq? (car (car scope)) varname) (cons (list varname value) (cdr scope)))
      (else (cons (car scope) (update_variable_in_scope varname value (cdr scope))))
     )
  )
)

;check first scope if scope contains varname; if yes, update scope, if not check next
(define update_variable_in_env
  (lambda (varname value env)
    (cond
      ((null? env) '())
      ;FIX CONS - NEED 2 VALUES TO ADD TOGETHER
      ((is_var_in_scope varname (car env)) (cons (update_variable_in_scope varname value (car env)) (cdr env)))
      (else (cons (car env) (update_variable_in_env varname value (cdr env))))
        )
    )
  )

(define is_var_in_scope
  (lambda (varname scope)
    (is_in_list (map (lambda (pair)
           (eq? (car pair) varname)) scope) true)
    )
  )

;when-exp
;parsedCode = (when-exp (bool-exp < a 5) (block-exp (output-exp (var-exp a)) (let-exp...)
(define process_when_exp
  (lambda (parsedCode env)
    (let
         ((condition (processor (cadr parsedCode) env))
          (true_body_exp (append (cdr (caddr parsedCode)) (list parsedCode)))
          )
     (erase_void (if condition
         ;append parsedCode to parsedCode; execute every code
         (process_when_exp_body true_body_exp env)
         ;otherwise, break/stop
         (display-output "while loop stops here")
       ))
        
     ))
  )

(define process_when_exp_body
  (lambda (body env)
    (cond
      ((null? body) '())
      ((eq? 'assign-exp (car (car body)))
       (process_when_exp_body (cdr body) (process_assign_exp (car body) env)))
      (else (cons (processor (car body) env) (process_when_exp_body (cdr body) env)))
    )
  )
)

(define process_each_exp
  (lambda (body env)
    (let*
        ((new_env (process_assign_exp (cadr body) env))
         (condition (process_bool_exp (cadr (caddr body)) new_env))
         (true_exp (append (cadddr (caddr body)) (list (caddr body))))
           )
     (if condition
        (processor true_exp new_env)
        (display-output "end of each loop"))
    )
    )
  )
;when keyword is each-list-exp
(define process_each_list_exp
  (lambda (body env)
    (cond
      ((eq? (length body) 1) (display-output "each loop ends here"))
      ((eq? 'assign-exp (car (cadr body)))
            (processor (cons 'each-list-exp (cddr body)) (processor (cadr body) env)))
      ((void? (cadr body)) (list (cadr body)))
      (else
       (append (processor (cadr body) env)
             (processor (cons 'each-list-exp (cddr body)) env))
       ;when teh last time each-body-exp return #void
       )
      )
    )
  )

(define process_each_body_exp
  (lambda (body env)
    (let*
        ((new_env (process_assign_exp (caddr body) env)) ;3rd item in list
         (condition (process_bool_exp (cadr body) new_env)) ;2nd item in list
         (true_exp (append (cadddr body) (list body))) ;
         )
      (if condition
          (processor true_exp new_env) 
          (display-output "false exp - each loop stops here"))
    )
  )
)


(define erase_void
  (lambda (lst)
    (cond
      ((null? lst) '())
      ((void? lst) '())
      ((void? (car lst)) erase_void (cdr lst))
      (else (append (car lst) (erase_void (cdr lst))))
     )
    )
  )
;processor finds the variable, then bounds the identifier to the resolved variable value
;processor (var-exp a)) -> (resolve a variable_env -> 1
;processor (app-exp (func-exp ((var-exp x)) (var-exp x)) (var-exp xa))
(define processor
  (lambda (parsedCode env)
    (cond
      ;when parsedCode is empty
      ((null? parsedCode)
       (error-output "Processor received illegal parsed code"))
      ;when parsedCode is a var exp
      ((eq? 'var-exp (car parsedCode))
       (process_var_exp parsedCode env))
      ;when parsedCode is a app exp
      ((eq? 'app-exp (car parsedCode))
       (process_app_exp parsedCode env))
      ;when parsedCode is numeric exp
      ((eq? 'num-exp (car parsedCode))
       (process_num_exp parsedCode env))
      ;when parsedCode is boolean exp
      ((eq? 'bool-exp (car parsedCode))
       (process_bool_exp parsedCode env))
      ;when parsedCode is asked expression
      ((eq? 'ask-exp (car parsedCode))
       (process_ask_exp parsedCode env))
      ;when parsedCode is math expression
      ((eq? 'math-exp (car parsedCode))
       (process_math_exp parsedCode env))
      ;when parsedCode is let expression
      ((eq? 'let-exp (car parsedCode))
       (process_let_exp parsedCode env))
      ;when parsedCode is assign expression
      ((eq? 'assign-exp (car parsedCode))
        (process_assign_exp parsedCode env))
      ;when parsedCode is each expression
      ((eq? 'each-exp (car parsedCode))
        (process_each_exp parsedCode env))
      ;when parsedCode is each body expression
      ((eq? 'each-body-exp (car parsedCode))
        (process_each_body_exp parsedCode env))
      ;when parsedCode is each list  expression
      ((eq? 'each-list-exp (car parsedCode))
        (process_each_list_exp parsedCode env))
      ;when parsedCode is when expression
      ((eq? 'when-exp (car parsedCode))
        (process_when_exp parsedCode env))
      ;when parsedCode is output expression
      ((eq? 'output-exp (car parsedCode))
       (displayln (string-append "*** output ***: "(number->string (processor (cadr parsedCode) env)))))
      ;block
      ((eq? 'block-exp (car parsedCode))
       (pick_first_non_void_from_list
        (map (lambda (code) (processor code env)) (cdr parsedCode))))
      ;otherwise
      (else (error-output "Processor failed to produce result"))
    )
  )
)

(provide (all-defined-out))